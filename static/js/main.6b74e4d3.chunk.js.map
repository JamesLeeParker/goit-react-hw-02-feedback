{"version":3,"sources":["Feadback/Statistic/Statistic.jsx","Feadback/FeedbackOptions/FeedbackOptions.jsx","Feadback/Feadback.jsx","App/App.jsx","index.js"],"names":["Statistic","state","counterFeedback","cpountPosFeedback","good","neutral","bad","FeedbackOptions","options","onLeaveFeedback","type","onClick","Feadback","props","increaseFeedback","setState","prevState","degreaseFeedback","pervState","neutralFeedback","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAaeA,EAbG,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,gBAAiBC,EAAwB,EAAxBA,kBAC3C,OACE,qCACE,2CACA,yCAAYF,EAAMG,QAClB,4CAAeH,EAAMI,WACrB,wCAAWJ,EAAMK,OACjB,0CAAaJ,KACb,sDAAyBC,EAAzB,WCESI,EAVS,SAAC,GAAiC,EAA/BC,QAAgC,IAAvBC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,wBAAQC,KAAK,SAASC,QAASF,EAA/B,SACGA,OCCHG,E,4MACJX,MAAQ,CACNG,KAAM,EAAKS,MAAMT,KACjBC,QAAS,EAAKQ,MAAMR,QACpBC,IAAK,EAAKO,MAAMP,K,EAGlBQ,iBAAmB,WACjB,EAAKC,UAAS,SAACC,GACb,MAAO,CACLZ,KAAMY,EAAUZ,KAAO,O,EAK7Ba,iBAAmB,WACjB,EAAKF,UAAS,SAACG,GACb,MAAO,CACLZ,IAAKY,EAAUZ,IAAM,O,EAK3Ba,gBAAkB,WAChB,EAAKJ,UAAS,SAACC,GACb,MAAO,CACLX,QAASW,EAAUX,QAAU,O,EAKnCe,mBAAqB,kBACnB,EAAKnB,MAAMG,KAAO,EAAKH,MAAMK,IAAM,EAAKL,MAAMI,S,EAEhDgB,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,IAAM,EAAKH,qBAAwB,EAAKnB,MAAMG,O,4CAGnE,WACE,OACE,qCACE,cAAC,EAAD,CACEI,QAASgB,KAAKV,iBACdL,gBAAiB,SAEnB,cAAC,EAAD,CACED,QAASgB,KAAKL,gBACdV,gBAAiB,YAEnB,cAAC,EAAD,CACED,QAASgB,KAAKP,iBACdR,gBAAiB,QAGlBe,KAAKvB,MAAMG,MAAQ,EAClB,cAAC,EAAD,CACEH,MAAOuB,KAAKvB,MACZC,gBAAiBsB,KAAKJ,qBACtBjB,kBAAmBqB,KAAKH,oCAG1B,6D,GA7DaI,aA0ERb,IC5EA,SAASc,IACtB,OACE,gCACE,uDACA,cAAC,EAAD,CAAUtB,KAAM,EAAGC,QAAS,EAAGC,IAAK,OCF1CqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.6b74e4d3.chunk.js","sourcesContent":["const Statistic = ({ state, counterFeedback, cpountPosFeedback }) => {\r\n  return (\r\n    <>\r\n      <h2>Statistic</h2>\r\n      <div>Good: {state.good}</div>\r\n      <div>Neutral: {state.neutral}</div>\r\n      <div>Bad: {state.bad}</div>\r\n      <div>Total: {counterFeedback}</div>\r\n      <div>Positive feedback: {cpountPosFeedback}%</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistic;\r\n","const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <button type=\"button\" onClick={onLeaveFeedback}>\r\n        {onLeaveFeedback}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import { Component } from \"react\";\r\nimport Statistic from \"./Statistic/Statistic\";\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\";\r\nimport Section from \"./Section/Section\";\r\n\r\nclass Feadback extends Component {\r\n  state = {\r\n    good: this.props.good,\r\n    neutral: this.props.neutral,\r\n    bad: this.props.bad,\r\n  };\r\n\r\n  increaseFeedback = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        good: prevState.good + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  degreaseFeedback = () => {\r\n    this.setState((pervState) => {\r\n      return {\r\n        bad: pervState.bad + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  neutralFeedback = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        neutral: prevState.neutral + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.bad + this.state.neutral;\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    return Math.floor((100 / this.countTotalFeedback()) * this.state.good);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <FeedbackOptions\r\n          options={this.increaseFeedback}\r\n          onLeaveFeedback={\"Good\"}\r\n        />\r\n        <FeedbackOptions\r\n          options={this.neutralFeedback}\r\n          onLeaveFeedback={\"Neutral\"}\r\n        />\r\n        <FeedbackOptions\r\n          options={this.degreaseFeedback}\r\n          onLeaveFeedback={\"Bad\"}\r\n        />\r\n\r\n        {this.state.good >= 1 ? (\r\n          <Statistic\r\n            state={this.state}\r\n            counterFeedback={this.countTotalFeedback()}\r\n            cpountPosFeedback={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <h2>There is no feedback</h2>\r\n        )}\r\n\r\n        {/* <Statistic\r\n          state={this.state}\r\n          counterFeedback={this.countTotalFeedback()}\r\n          cpountPosFeedback={this.countPositiveFeedbackPercentage()}\r\n        /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feadback;\r\n","import { Component } from \"react\";\r\nimport Feedback from \"../Feadback/Feadback\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <h1>Please leave feadback</h1>\r\n      <Feedback good={0} neutral={0} bad={0} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}